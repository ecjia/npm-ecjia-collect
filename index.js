import {all} from "./methods/all";
import {average} from "./methods/average";
import {chunk} from "./methods/chunk";
import {collapse} from "./methods/collapse";
import {combine} from "./methods/combine";
import {concat} from "./methods/concat";
import {contains} from "./methods/contains";
import {count} from "./methods/count";
import {countBy} from "./methods/countBy";
import {crossJoin} from "./methods/crossJoin";
import {dd} from "./methods/dd";
import {diff} from "./methods/diff";
import {diffAssoc} from "./methods/diffAssoc";
import {diffKeys} from "./methods/diffKeys";
import {dump} from "./methods/dump";
import {duplicates} from "./methods/duplicates";
import {each} from "./methods/each";
import {eachSpread} from "./methods/eachSpread";
import {every} from "./methods/every";
import {except} from "./methods/except";
import {filter} from "./methods/filter";
import {first} from "./methods/first";
import {firstWhere} from "./methods/firstWhere";
import {flatMap} from "./methods/flatMap";
import {flatten} from "./methods/flatten";
import {flip} from "./methods/flip";
import {forPage} from "./methods/forPage";
import {forget} from "./methods/forget";
import {get} from "./methods/get";
import {groupBy} from "./methods/groupBy";
import {has} from "./methods/has";
import {implode} from "./methods/implode";
import {intersect} from "./methods/intersect";
import {intersectByKeys} from "./methods/intersectByKeys";
import {isEmpty} from "./methods/isEmpty";
import {isNotEmpty} from "./methods/isNotEmpty";
import {join} from "./methods/join";
import {keyBy} from "./methods/keyBy";
import {keys} from "./methods/keys";
import {last} from "./methods/last";
import {macro} from "./methods/macro";
import {make} from "./methods/make";
import {map} from "./methods/map";
import {mapSpread} from "./methods/mapSpread";
import {mapToDictionary} from "./methods/mapToDictionary";
import {mapInto} from "./methods/mapInto";
import {mapToGroups} from "./methods/mapToGroups";
import {mapWithKeys} from "./methods/mapWithKeys";
import {max} from "./methods/max";
import {median} from "./methods/median";
import {merge} from "./methods/merge";
import {mergeRecursive} from "./methods/mergeRecursive";
import {min} from "./methods/min";
import {mode} from "./methods/mode";
import {nth} from "./methods/nth";
import {only} from "./methods/only";
import {pad} from "./methods/pad";
import {partition} from "./methods/partition";
import {pipe} from "./methods/pipe";
import {pluck} from "./methods/pluck";
import {pop} from "./methods/pop";
import {prepend} from "./methods/prepend";
import {pull} from "./methods/pull";
import {push} from "./methods/push";
import {put} from "./methods/put";
import {random} from "./methods/random";
import {reduce} from "./methods/reduce";
import {reject} from "./methods/reject";
import {replace} from "./methods/replace";
import {replaceRecursive} from "./methods/replaceRecursive";
import {reverse} from "./methods/reverse";
import {search} from "./methods/search";
import {shift} from "./methods/shift";
import {shuffle} from "./methods/shuffle";
import {slice} from "./methods/slice";
import {sort} from "./methods/sort";
import {sortBy} from "./methods/sortBy";
import {sortByDesc} from "./methods/sortByDesc";
import {sortKeys} from "./methods/sortKeys";
import {sortKeysDesc} from "./methods/sortKeysDesc";
import {splice} from "./methods/splice";
import {split} from "./methods/split";
import {sum} from "./methods/sum";
import {SymbolIterator} from "./methods/symbol.iterator";
import {take} from "./methods/take";
import {tap} from "./methods/tap";
import {times} from "./methods/times";
import {toArray} from "./methods/toArray";
import {toJson} from "./methods/toJson";
import {transform} from "./methods/transform";
import {unless} from "./methods/unless";
import {whenNotEmpty} from "./methods/whenNotEmpty";
import {whenEmpty} from "./methods/whenEmpty";
import {union} from "./methods/union";
import {unique} from "./methods/unique";
import {unwrap} from "./methods/unwrap";
import {values} from "./methods/values";
import {when} from "./methods/when";
import {where} from "./methods/where";
import {whereBetween} from "./methods/whereBetween";
import {whereIn} from "./methods/whereIn";
import {whereInstanceOf} from "./methods/whereInstanceOf";
import {whereNotBetween} from "./methods/whereNotBetween";
import {whereNotIn} from "./methods/whereNotIn";
import {wrap} from "./methods/wrap";
import {zip} from "./methods/zip";

class Collection {

    constructor(collection) {
        if (collection !== undefined && !Array.isArray(collection) && typeof collection !== 'object') {
            this.items = [collection];
        }
        else if (collection instanceof this.constructor) {
            this.items = collection.all();
        }
        else {
            this.items = collection || [];
        }
    }

}

Collection.prototype.all              = all;
Collection.prototype.average          = average;
Collection.prototype.avg              = average;
Collection.prototype.chunk            = chunk;
Collection.prototype.collapse         = collapse;
Collection.prototype.combine          = combine;
Collection.prototype.concat           = concat;
Collection.prototype.contains         = contains;
Collection.prototype.count            = count;
Collection.prototype.countBy          = countBy;
Collection.prototype.crossJoin        = crossJoin;
Collection.prototype.dd               = dd;
Collection.prototype.diff             = diff;
Collection.prototype.diffAssoc        = diffAssoc;
Collection.prototype.diffKeys         = diffKeys;
Collection.prototype.dump             = dump;
Collection.prototype.duplicates       = duplicates;
Collection.prototype.each             = each;
Collection.prototype.eachSpread       = eachSpread;
Collection.prototype.every            = every;
Collection.prototype.except           = except;
Collection.prototype.filter           = filter;
Collection.prototype.first            = first;
Collection.prototype.firstWhere       = firstWhere;
Collection.prototype.flatMap          = flatMap;
Collection.prototype.flatten          = flatten;
Collection.prototype.flip             = flip;
Collection.prototype.forPage          = forPage;
Collection.prototype.forget           = forget;
Collection.prototype.get              = get;
Collection.prototype.groupBy          = groupBy;
Collection.prototype.has              = has;
Collection.prototype.implode          = implode;
Collection.prototype.intersect        = intersect;
Collection.prototype.intersectByKeys  = intersectByKeys;
Collection.prototype.isEmpty          = isEmpty;
Collection.prototype.isNotEmpty       = isNotEmpty;
Collection.prototype.join             = join;
Collection.prototype.keyBy            = keyBy;
Collection.prototype.keys             = keys;
Collection.prototype.last             = last;
Collection.prototype.macro            = macro;
Collection.prototype.make             = make;
Collection.prototype.map              = map;
Collection.prototype.mapSpread        = mapSpread;
Collection.prototype.mapToDictionary  = mapToDictionary;
Collection.prototype.mapInto          = mapInto;
Collection.prototype.mapToGroups      = mapToGroups;
Collection.prototype.mapWithKeys      = mapWithKeys;
Collection.prototype.max              = max;
Collection.prototype.median           = median;
Collection.prototype.merge            = merge;
Collection.prototype.mergeRecursive   = mergeRecursive;
Collection.prototype.min              = min;
Collection.prototype.mode             = mode;
Collection.prototype.nth              = nth;
Collection.prototype.only             = only;
Collection.prototype.pad              = pad;
Collection.prototype.partition        = partition;
Collection.prototype.pipe             = pipe;
Collection.prototype.pluck            = pluck;
Collection.prototype.pop              = pop;
Collection.prototype.prepend          = prepend;
Collection.prototype.pull             = pull;
Collection.prototype.push             = push;
Collection.prototype.put              = put;
Collection.prototype.random           = random;
Collection.prototype.reduce           = reduce;
Collection.prototype.reject           = reject;
Collection.prototype.replace          = replace;
Collection.prototype.replaceRecursive = replaceRecursive;
Collection.prototype.reverse          = reverse;
Collection.prototype.search           = search;
Collection.prototype.shift            = shift;
Collection.prototype.shuffle          = shuffle;
Collection.prototype.slice            = slice;
Collection.prototype.some             = contains;
Collection.prototype.sort             = sort;
Collection.prototype.sortBy           = sortBy;
Collection.prototype.sortByDesc       = sortByDesc;
Collection.prototype.sortKeys         = sortKeys;
Collection.prototype.sortKeysDesc     = sortKeysDesc;
Collection.prototype.splice           = splice;
Collection.prototype.split            = split;
Collection.prototype.sum              = sum;
Collection.prototype.take             = take;
Collection.prototype.tap              = tap;
Collection.prototype.times            = times;
Collection.prototype.toArray          = toArray;
Collection.prototype.toJson           = toJson;
Collection.prototype.transform        = transform;
Collection.prototype.unless           = unless;
Collection.prototype.unlessEmpty      = whenNotEmpty;
Collection.prototype.unlessNotEmpty   = whenEmpty;
Collection.prototype.union            = union;
Collection.prototype.unique           = unique;
Collection.prototype.unwrap           = unwrap;
Collection.prototype.values           = values;
Collection.prototype.when             = when;
Collection.prototype.whenEmpty        = whenEmpty;
Collection.prototype.whenNotEmpty     = whenNotEmpty;
Collection.prototype.where            = where;
Collection.prototype.whereBetween     = whereBetween;
Collection.prototype.whereIn          = whereIn;
Collection.prototype.whereInstanceOf  = whereInstanceOf;
Collection.prototype.whereNotBetween  = whereNotBetween;
Collection.prototype.whereNotIn       = whereNotIn;
Collection.prototype.wrap             = wrap;
Collection.prototype.zip              = zip;
Collection.prototype[Symbol.iterator] = SymbolIterator;

export {
    Collection as EcjiaCollect
};
